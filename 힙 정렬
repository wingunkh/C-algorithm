/*
힙 정렬이란?
: 선택정렬을 응용하였으며, 힙은 '부모의 값이 자식의 값보다 항상 크다'라는 조건을 만족하는 완전 이진트리다.
'가장 큰 값이 루트에 위치'하는 특징을 이용하는 정렬 알고리즘이며
힙에서 가장 큰 값인 루트를 꺼내서 배열의 마지막에서부터 차례대로 대입한다.
이때, 루트를 꺼낸 후 비어있는 루트 위치로 힙의 마지막요소(오른쪽 아래 끝에 있는 자식요소)를 옮긴다.
이때 루트 위치로 옮겨진 힙의 마지막 요소 이외에는 힙 상태를 유지하고 있으므로
이 값만 알맞은 위치로 이동한다면 힙 상태를 유지할 수 있다.
*/

#include <stdio.h>
#include <stdlib.h>

#define swap(type,x,y) do {type t=x; x=y; y=t;} while(0)

static void downheap(int a[], int left, int right){ // a[left] ~ a[right]를 힙으로 만드는 함수
	int temp=a[left]; //루트
	int child, parent;
	
	for(parent=left; parent < (right+1) / 2; parent=child){ //부모는 a[(i-1)/2], 왼쪽 자식은 a[i*2+1], 오른쪽 자식은 a[i*2+2]가 성립한다.
		int cl=parent*2+1;
		int cr=cl+1;
		child=(cr <= right && a[cr] > a[cl]) ? cr : cl;
		if(temp >= a[child])
			break;
		a[parent]=a[child];
	}
	a[parent]=temp;
}

void heapsort(int a[], int n){ //힙 정렬 함수
	for(int i=(n-1)/2; i >= 0; i--)// downheap함수를 사용하여 배열 a를 힙으로 만듭니다.
		downheap(a,i,n-1);
	for(int i=n-1; i>0; i--){ //루트(a[0])에 있는 가장 큰 값을 빼내어 배열 마지막 요소와 바꾸고 배열의 나머지 부분을 다시 힙으로 만드는 과정을 반복하여 정렬을 수행합니다.
		swap(int, a[0], a[i]);
		downheap(a,0,i-1);
	}
}

int main(void){
	int nx;
	int *x;
	printf("힙 정렬\n");
	printf("요소 개수: ");
	scanf("%d",&nx);
	x=malloc(sizeof(int)*nx);
	for(int i=0;i<nx;i++){
		printf("x[%d] : ",i);
		scanf("%d",&x[i]);
	}
	heapsort(x,nx);
	printf("오름차순으로 정렬했습니다.\n");
	for(int i=0;i<nx;i++){
		printf("x[%d] = %d\n",i,x[i]);
	}
	free(x);
	
	return 0;
}
